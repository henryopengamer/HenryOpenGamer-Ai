import asyncio
import random
import time
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîπ –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7041656672:AAFTsIXOEY5l4BtDiLNZ0vKd1f1V_KAm3eo"

bot = Bot(token=TOKEN)
dp = Dispatcher()

duel_active = {}
reaction_time = {}

@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç {message.from_user.id}")
    await message.answer("ü§† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª—å–Ω—ã–π –±–æ—Ç! –í–≤–µ–¥–∏—Ç–µ /duel –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")

@dp.message(Command("duel"))
async def start_duel(message: types.Message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥—É—ç–ª—å.")
    
    if user_id in duel_active:
        await message.answer("üî´ –î—É—ç–ª—å —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª.")
        return
    
    duel_active[user_id] = True
    await message.answer("ü§† –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å... –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª!")
    
    delay = random.uniform(1, 5)
    logging.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ '–û–ì–û–ù–¨': {delay:.2f} —Å–µ–∫.")
    await asyncio.sleep(delay)
    
    reaction_time[user_id] = time.time()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üî• –í—ã—Å—Ç—Ä–µ–ª!", callback_data="shoot")]])
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É '–û–ì–û–ù–¨!'")
    await message.answer("üî• –û–ì–û–ù–¨! –ñ–ú–ò!", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "shoot")
async def handle_shoot(call: types.CallbackQuery):
    user_id = call.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –í—ã—Å—Ç—Ä–µ–ª!")
    
    if user_id not in duel_active:
        await call.answer("–í—ã –Ω–µ –≤ –¥—É—ç–ª–∏! –í–≤–µ–¥–∏—Ç–µ /duel")
        return
    
    elapsed_time = time.time() - reaction_time[user_id]
    del duel_active[user_id]
    del reaction_time[user_id]
    
    if elapsed_time < 1.6:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∏–≥—Ä–∞–ª —Å —Ä–µ–∞–∫—Ü–∏–µ–π {elapsed_time:.2f} —Å–µ–∫.")
        await call.message.answer(f"üéØ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {call.from_user.first_name}! –í—ã—Å—Ç—Ä–µ–ª –∑–∞ {elapsed_time:.2f} —Å–µ–∫. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! ü§†")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–∏–≥—Ä–∞–ª, –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ {elapsed_time:.2f} —Å–µ–∫.")
        await call.message.answer(f"üíÄ –£–ø—Å... –í—ã—Å—Ç—Ä–µ–ª –∑–∞ {elapsed_time:.2f} —Å–µ–∫. –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ! –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª! üòà")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
